//
// ResultMetadata.h
//
// $Id: //poco/1.5/Data/PostgreSQL/include/Poco/Data/PostgreSQL/ResultMetadata.h#1 $
//
// Library: Data
// Package: PostgreSQL
// Module:  ResultMetadata
//
// Definition of the ResultMetadata class.
//
// Copyright (c) 2008, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Data_PostgreSQL_ResultMetadata_INCLUDED
#define Data_PostgreSQL_ResultMetadata_INCLUDED

#include "Poco/Data/MetaColumn.h"
#include "Poco/Data/PostgreSQL/StatementExecutor.h"


#include <libpq-fe.h>
#include <vector>

namespace Poco {
namespace Data {
namespace PostgreSQL {

class ResultMetadata
	/// PostgreSQL result metadata
{
public:

	void reset();
		/// Resets the metadata.

	void init( StatementExecutor& aStatementExecutor );
		/// Initializes the metadata.

	std::size_t columnsReturned() const;
		/// Returns the number of columns in resultset.

	const MetaColumn& metaColumn( std::size_t aPosition ) const;
		/// Returns the reference to the specified metacolumn.

	POSTGRESQL_BIND* row();
		/// Returns pointer to native row.

	std::size_t length( std::size_t aPosition ) const;
		/// Returns the length.

	const unsigned char* rawData( std::size_t aPosition ) const;
		/// Returns raw data.

	bool isNull( std::size_t aPosition ) const;
		/// Returns true if value at pos is null.

private:
	std::vector< MetaColumn >         _columns;
	std::vector< POSTGRESQL_BIND >    _row;
	std::vector< char >               _buffer;
	std::vector< unsigned long >      _lengths;
	std::vector< my_bool >            _isNull;
};

}}}

#endif //Data_PostgreSQL_ResultMetadata_INCLUDED
